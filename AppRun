#!/bin/bash

# AppRun wrapper for Linux System Monitor AppImage
# Automatically requests elevated privileges if needed

# Get the directory where the AppImage is mounted
# In AppImage, $0 points to AppRun in the mounted directory
# The executable should be in the same directory as AppRun
APP_DIR="$(dirname "$(readlink -f "$0")")"
EXECUTABLE="$APP_DIR/linux-system-monitor"

# Verify executable exists
if [ ! -f "$EXECUTABLE" ]; then
    echo "Error: Cannot find linux-system-monitor executable in $APP_DIR" >&2
    exit 1
fi

# Function to check if we need elevated privileges
needs_privileges() {
    # Check if we can read RAPL power data (requires root on some systems)
    if [ ! -r "/sys/class/powercap/intel-rapl/intel-rapl:0/energy_uj" ] 2>/dev/null; then
        # Also check if we're already root
        if [ "$(id -u)" -ne 0 ]; then
            return 0  # Needs privileges and we're not root
        fi
    fi
    return 1  # Doesn't need privileges
}

# Function to launch with GUI privilege prompt
launch_with_privileges() {
    local display_server="x11"
    
    # Detect display server
    if [ -n "$WAYLAND_DISPLAY" ] || [ "$XDG_SESSION_TYPE" = "wayland" ]; then
        display_server="wayland"
    fi
    
    # Try GUI password prompt with sudo (most reliable approach)
    local password=""
    if command -v zenity >/dev/null 2>&1; then
        password=$(zenity --password --title="Linux System Monitor - Privileges Required" \
            --text="Administrator privileges are required to access Intel RAPL power monitoring data.\n\nPlease enter your password:" 2>/dev/null)
    elif command -v kdialog >/dev/null 2>&1; then
        password=$(kdialog --password "Administrator privileges are required to access Intel RAPL power monitoring data.\n\nPlease enter your password:" 2>/dev/null)
    fi
    
    if [ -n "$password" ]; then
        # Use sudo with preserved environment
        echo "$password" | sudo -S env DISPLAY="$DISPLAY" \
             WAYLAND_DISPLAY="$WAYLAND_DISPLAY" \
             XDG_SESSION_TYPE="$XDG_SESSION_TYPE" \
             XDG_RUNTIME_DIR="$XDG_RUNTIME_DIR" \
             XDG_CONFIG_HOME="$XDG_CONFIG_HOME" \
             XDG_DATA_HOME="$XDG_DATA_HOME" \
             HOME="$HOME" \
             USER="$USER" \
             PATH="$PATH" \
             LANG="$LANG" \
             LC_ALL="$LC_ALL" \
             ELECTRON_DISABLE_GPU=1 \
             ELECTRON_DISABLE_GPU_COMPOSITING=1 \
             ELECTRON_DISABLE_GPU_SANDBOX=1 \
             "$EXECUTABLE" --no-sandbox --ozone-platform="$display_server" "$@"
        exit $?
    elif command -v pkexec >/dev/null 2>&1; then
        # Fallback to pkexec if GUI password prompt failed
        # Use a simple wrapper script
        local wrapper_script="/tmp/.linux-system-monitor-$$.sh"
        printf '#!/bin/bash\nexport DISPLAY="%s"\nexport WAYLAND_DISPLAY="%s"\nexport XDG_RUNTIME_DIR="%s"\nexport HOME="%s"\nexport USER="%s"\nexec "%s" --no-sandbox --ozone-platform="%s" "$@"\n' \
               "$DISPLAY" "$WAYLAND_DISPLAY" "$XDG_RUNTIME_DIR" "$HOME" "$USER" \
               "$EXECUTABLE" "$display_server" > "$wrapper_script"
        chmod 755 "$wrapper_script"
        pkexec "$wrapper_script" "$@"
        local exit_code=$?
        rm -f "$wrapper_script"
        exit $exit_code
    # Fallback to gksu/gksudo (X11 only)
    elif command -v gksu >/dev/null 2>&1 && [ "$display_server" = "x11" ]; then
        gksu "$EXECUTABLE --no-sandbox --ozone-platform=$display_server"
    elif command -v gksudo >/dev/null 2>&1 && [ "$display_server" = "x11" ]; then
        gksudo "$EXECUTABLE --no-sandbox --ozone-platform=$display_server"
    else
        # Last resort: show error message
        if command -v zenity >/dev/null 2>&1; then
            zenity --error --title="Linux System Monitor" \
                --text="Unable to request elevated privileges.\n\nPlease run manually with:\nsudo $EXECUTABLE --no-sandbox"
        elif command -v kdialog >/dev/null 2>&1; then
            kdialog --error "Unable to request elevated privileges.\n\nPlease run manually with:\nsudo $EXECUTABLE --no-sandbox"
        else
            echo "Error: Unable to request elevated privileges." >&2
            echo "Please run manually with: sudo $EXECUTABLE --no-sandbox" >&2
        fi
        exit 1
    fi
}

# Main execution
if needs_privileges; then
    # Check if we can access power data - if not, we need privileges
    launch_with_privileges
else
    # No privileges needed - run normally
    exec "$EXECUTABLE" "$@"
fi

